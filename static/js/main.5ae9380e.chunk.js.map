{"version":3,"sources":["Todo/constants.js","Todo/reducer.js","Todo/action.js","Todo/index.js","App.js","reportWebVitals.js","index.js"],"names":["SET_JOB","ADD_JOB","DELETE_JOB","initState","job","jobs","reducer","state","action","type","payload","newJob","splice","Error","setJob","App","useReducer","dispatch","focus","useRef","style","padding","className","ref","value","placeholder","onChange","e","target","onClick","current","map","index","cursor","marginLeft","Todo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAAaA,EAAU,UACVC,EAAU,UACVC,EAAa,aCCbC,EAAY,CACrBC,IAAK,GACLC,KAAM,IA2BKC,EAxBG,SAACC,EAAMC,GACtB,OAAQA,EAAOC,MACb,KAAKT,EACH,OAAO,2BACFO,GADL,IAEEH,IAAMI,EAAOE,UAEjB,KAAKT,EACH,OAAO,2BACFM,GADL,IAEEF,KAAI,sBAAOE,EAAMF,MAAb,CAAkBG,EAAOE,YAEjC,KAAKR,EACH,IAAMS,EAAM,YAAOJ,EAAMF,MAEzB,OADAM,EAAOC,OAAOJ,EAAOE,QAAS,GACvB,2BACDH,GADN,IAEGF,KAAOM,IAEZ,QACE,MAAM,IAAIE,MAAM,oBC1BVC,EAAS,SAACJ,GACnB,MAAO,CACLD,KAAOT,EACPU,Y,OCiDSK,MAjDf,WACE,MAAyBC,qBAAWV,EAAQH,GAA5C,mBAAOI,EAAP,KAAaU,EAAb,KAEOb,EAAYG,EAAZH,IAAIC,EAAQE,EAARF,KAELa,EAAQC,mBASd,OACE,sBAAKC,MAAO,CAAEC,QAAQ,IAAMC,UAAU,MAAtC,UACI,0CACA,uBACEC,IAAKL,EACLM,MAAOpB,EACPqB,YAAY,qBACZC,SAAU,SAACC,GACTV,EAASH,EAAOa,EAAEC,OAAOJ,WAG7B,wBACAK,QAnBe,WACnBZ,EDHM,CACLR,KAAOR,EACPS,QCCeN,IAChBa,EAASH,EAAO,KAEhBI,EAAMY,QAAQZ,SAcV,iBAGA,6BAEIb,EAAK0B,KAAI,SAAC3B,EAAI4B,GACZ,OAAO,+BACJ5B,EACD,sBACCgB,MAAO,CAACa,OAAO,UACNC,WAAW,IAEpBL,QAAW,WACTZ,ED1BT,CACLR,KAAOP,EACPQ,QCwBiCsB,KALtB,iBAFcA,YC3BfjB,EANH,WACV,OACE,cAACoB,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5ae9380e.chunk.js","sourcesContent":["export const SET_JOB = 'set_job'\r\nexport const ADD_JOB = 'add_job'\r\nexport const DELETE_JOB = 'delete_job'","import {SET_JOB,ADD_JOB,DELETE_JOB} from './constants'\r\n\r\n// init state\r\nexport const initState = {\r\n    job: '',\r\n    jobs: []\r\n  }\r\n  \r\n  const reducer = (state,action) => {\r\n   switch (action.type) {\r\n     case SET_JOB:\r\n       return {\r\n         ...state,\r\n         job : action.payload\r\n       }\r\n     case ADD_JOB:\r\n       return {\r\n         ...state,\r\n         jobs : [...state.jobs,action.payload]\r\n       }  \r\n     case DELETE_JOB:\r\n       const newJob = [...state.jobs]\r\n       newJob.splice(action.payload, 1)\r\n       return {\r\n          ...state,\r\n          jobs : newJob\r\n       }\r\n     default:\r\n       throw new Error('Invalid action')\r\n   }\r\n  }\r\n\r\nexport default reducer;  ","import {SET_JOB,ADD_JOB,DELETE_JOB} from './constants'\r\n\r\nexport const setJob = (payload) => {\r\n    return {\r\n      type : SET_JOB,\r\n      payload\r\n    }\r\n }\r\n \r\nexport const addJob = (payload) => {\r\n   return {\r\n     type : ADD_JOB,\r\n     payload\r\n   }\r\n }\r\n \r\nexport const deleteJob = (payload) => {\r\n   return {\r\n     type : DELETE_JOB,\r\n     payload\r\n   }\r\n }","import {useReducer,useRef}  from 'react';\r\nimport reducer,{initState} from './reducer';\r\nimport {addJob,setJob,deleteJob} from './action'\r\n \r\n\r\nfunction App() {\r\n  const [state,dispatch] = useReducer(reducer,initState)\r\n  \r\n  const {job,jobs} = state\r\n\r\n  const focus = useRef()\r\n\r\n  const handleSubmit = () => {\r\n    dispatch(addJob(job))\r\n    dispatch(setJob(''))\r\n\r\n    focus.current.focus()\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding:30 }} className=\"App\">\r\n        <h3>Todo App</h3>\r\n        <input\r\n          ref={focus}\r\n          value={job}\r\n          placeholder='Enter your work...'\r\n          onChange={(e) =>{\r\n            dispatch(setJob(e.target.value))\r\n          }}\r\n        />\r\n        <button\r\n        onClick = {handleSubmit}\r\n        >Add</button>\r\n        <ul>\r\n          {\r\n            jobs.map((job,index) => {\r\n              return <li key={index}>\r\n                {job}\r\n                <span\r\n                 style={{cursor:'pointer',\r\n                          marginLeft:20\r\n                        }}\r\n                 onClick = {() => {\r\n                   dispatch(deleteJob(index))\r\n                 }}\r\n                >X</span>\r\n              </li>\r\n            } )\r\n          }\r\n        </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import TodoApp from './Todo'\n\n\nconst App = () => {\n  return(\n    <TodoApp />\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}